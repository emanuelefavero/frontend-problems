// * A number sequence

/*
Here is a sequence:

'1', first number is 1
'11', since previous number has One(1) 1
'21', since previous number has Two(2) 1s
'1211', since previous number has One(1) 2 and One(1) 1
'111221', since previous number has One(1) 1, One(1) 2, Two(2) 1s
'312211', since previous number has Three(3) 1s, Two(2) 2s, One(1) 1
....
As explained above, the sequence is generated by counting the digits of previous number.

Please create getNthNum(n) to return the n-th number string in the sequence, n starts from 1.
*/

function getNthNum(n) {
  // BASE CASE
  if (n === 1) return '1'

  // RECURSIVE CALL: get the previous number in the sequence
  const prevSequence = getNthNum(n - 1)

  let output = ''

  // Iterate over each digit in the previous sequence
  for (let i = 0; i < prevSequence.length; i++) {
    // Start counting the occurrence of a digit (initially 1)
    let count = 1

    // Continue counting if the next digit is the same as the current one
    while (prevSequence[i] === prevSequence[i + 1]) {
      count++
      i++ // skip the counted digit
    }

    // Append the count and the digit to the output
    output += count + prevSequence[i]
  }

  return output
}

// -------------------------
// TESTS
console.log(getNthNum(1)) // '1'
console.log(getNthNum(2)) // '11'
console.log(getNthNum(3)) // '21'
console.log(getNthNum(4)) // '1211'
console.log(getNthNum(5)) // '111221'
console.log(getNthNum(6)) // '312211'
